% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list_tree_neighbour.R
\name{list_tree_neighbour}
\alias{list_tree_neighbour}
\title{Identify trees within a neighborhood}
\usage{
list_tree_neighbour(
  x,
  buffer_radius,
  plot_radius = 12.6,
  ids,
  diam = NULL,
  wt = NULL
)
}
\arguments{
\item{x}{data frame with stem mapped trees for a \strong{single plot}.  Must be an \code{sf} object with coordinates in metres.}

\item{buffer_radius}{Width of radius around each tree, in metres.  This is used to define a tree's 'neighborhood'.}

\item{plot_radius}{Plot radius, in metres.}

\item{ids}{Vector of tree identifiers.  Must be same length as \code{nrow(x)} and it is assumed that \code{ids[1]} corresponds to first row of x, and so on.}

\item{diam}{Optional.  Vector of tree diameters, which if provided, must be in centimetres and will be used additively to increase buffer size.  If provided, must be equal length to data in x.}

\item{wt}{Optional.  Vector of weightings, which if provided, must be in metres and will be used multiplicatively to increase buffer size. If provided, must be equal length to data in x.}
}
\value{
A data frame with two columns that you can bind to x.  The first column is a nested data frame with \code{neighbour_treeID} providing the identifier of the neighbour tree,
and \code{trees_overlap} is a logical stating whether the tree buffers overlap (i.e., trees are within each other's "neighbourhood").  The second column \code{overlaps_plot} states if the tree's buffer overlaps with the plot boundary (in which case this tree should probably
be excluded from the analysis, as its full neighborhood extends past the plot and is therefore unknown).
}
\description{
This function analyzes stem map data and identifies which trees lie within a certain distance of each other.  The function also determines which trees are situated within a certain distance of the plot boundary (generally
these trees will be removed from neighborhood analysis for that given distance).
}
\examples{

library(dplyr)
library(stringr)
library(tibble)
library(sf)
library(tidyr)
library(ggplot2)

# Create a data frame of trees, diameters and their positions
x<-
 tibble::tribble(
   ~treeID,~X,~Y,~dbh,
   "Tree A",2,3,32.5,
   "Tree B",-1,0,15.6,
   "Tree C",-2.7,-2.7,34.7
 ) \%>\%
 sf::st_as_sf(coords=c("X","Y"))

 # Output from function.
x \%>\%
 sf::st_drop_geometry() \%>\%
 dplyr::left_join(
   list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID),
   by="treeID") \%>\%
 tidyr::unnest(-c(treeID,overlaps_plot))

# Function reports that tree 3 and 2 neighborhoods overlap when buffer is adjusted for tree diameter.

 # Plotting to double check
x \%>\%
 ggplot2::ggplot()+

 # first plot the plot area
 ggplot2::geom_sf(
   data=
     data.frame(X=0,Y=0) \%>\%
     sf::st_as_sf(coords=c("X","Y")) \%>\%
     sf::st_buffer(dist=3.99),
   alpha=0.2)+

 # plot tree positions and their diameter
 ggplot2::geom_sf(data=
                    x \%>\%
                    st_buffer(dist=.$dbh/100),alpha=0.8,col="green")+

 # plot buffer around each tree that adds DBH to the 1.5m radius, in red
 ggplot2::geom_sf(data=
                    x \%>\%
                    sf::st_buffer(dist=.$dbh/100+1.5),alpha=0.2,col="red")+

 # plot buffer around each tree that ignores DBH, in blue
 ggplot2::geom_sf(data=
                    x \%>\%
                    sf::st_buffer(dist=1.5),alpha=0.2,col="blue")+

 ggplot2::geom_sf()+
 ggplot2::geom_sf_label(aes(label=treeID))+
 ggplot2::theme_minimal()
# You can see that tree 3 and 2 neighborhoods only overlap if buffer is adjusted based on diameter.  Output from function is correct.

}
