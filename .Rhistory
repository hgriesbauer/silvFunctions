# determine if tree buffers overlap with plot
plot_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps(data.frame(X=0,Y=0,id="plot centre") %>%
sf::st_as_sf(coords=c("X","Y")) %>%
sf::st_buffer(dist=plot_radius)) %>%
as.matrix() %>%
as.data.frame() %>%
setNames("overlaps_plot")
# Stop function
if(nrow(plot_overlap)!=nrow(x) | nrow(tree_overlap)!=nrow(x)) {
stop("Error: the output is a different size than nrow(x).  Something wrong.")
}
# return
dplyr::bind_cols(tree_overlap,plot_overlap) %>%
return()
}
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID)
list_tree_neighbour<-function(x,buffer_radius,plot_radius=12.6,ids=NULL,diam=NULL,wt=NULL) {
# stop function if x is not sf object
stopifnot(any(class(x)%in%"sf"))
# incorporate diameter data into buffer
if(is.null(diam)) {buffer_radius=buffer_radius} else {
if(length(diam)!=nrow(x)) {stop("Length of diameter data does not match nrow(x)")} else {
buffer_radius=buffer_radius+(diam/2/100) }} # remember that diameter has to be converted to metres!
# incorporate weights into buffer
if(is.null(wt)) {buffer_radius=buffer_radius} else {
if(length(wt)!=nrow(x)) {stop("Length of weights does not match nrow(x)")} else {
buffer_radius=buffer_radius*wt}}
# determine which tree buffers overlap
tree_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
tibble::add_column(rowID=1:nrow(x),.before=1) %>%
tidyr::pivot_longer(-rowID,names_to="neighbour_tree",values_to="trees_overlap") %>%
dplyr::mutate(neighbour_tree=str_remove_all(neighbour_tree,"V") %>%
as.integer()) %>%
rename(neighbour_rowID=neighbour_tree) %>%
tidyr::nest(overlaps_trees=c(neighbour_rowID,trees_overlap))
# tidyr::nest("within_{{buffer_radius}}":=c(neighbour_tree,trees_overlap)) # problems with this one
# add treeID if provided
if(is.null(ids)) {} else {
tree_overlap<-
tree_overlap %>%
unnest(cols=names(.)[2]) %>%
mutate(treeID=ids[.$rowID]) %>%
mutate(neighbour_treeID=ids[.$neighbour_tree]) %>%
dplyr::select(treeID,neighbour_treeID,trees_overlap) %>%
tidyr::nest(overlaps_trees=c(neighbour_treeID,trees_overlap)) %>%
# tidyr::nest("within_{{buffer_radius}}":=c(neighbour_treeID,trees_overlap)) # problems with this one
dplyr::select(-treeID)}
# determine if tree buffers overlap with plot
plot_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps(data.frame(X=0,Y=0,id="plot centre") %>%
sf::st_as_sf(coords=c("X","Y")) %>%
sf::st_buffer(dist=plot_radius)) %>%
as.matrix() %>%
as.data.frame() %>%
setNames("overlaps_plot")
# Stop function
if(nrow(plot_overlap)!=nrow(x) | nrow(tree_overlap)!=nrow(x)) {
stop("Error: the output is a different size than nrow(x).  Something wrong.")
}
# return
dplyr::bind_cols(tree_overlap,plot_overlap) %>%
return()
}
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID)
library(tidyverse)
library(sf)
x<-
tibble::tribble(
~treeNum,~X,~Y,~dbh,~treeID,
1,2,3,32.5,"Tree A",
2,-1,0,15.6,"Tree B",
3,-2.7,-2.7,34.7,"Tree C"
) %>%
sf::st_as_sf(coords=c("X","Y"))
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame()
buffer_radius=1.5
plot_radius=12.6
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame()
buffer_radius=3
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame()
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
tibble::add_column(rowID=1:nrow(x),.before=1)
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame()
treeID=x$treeID
treeID
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
add_column(treeID=treeID)
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
add_column(treeID=treeID,.before=1) %>%
setNames(c("treeID",treeID))
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
add_column(treeID=treeID,.before=1) %>%
setNames(c("treeID",treeID)) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_tree",values_to="trees_overlap")
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
add_column(treeID=treeID,.before=1) %>%
setNames(c("treeID",treeID)) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_tree",values_to="trees_overlap") %>%
dplyr::mutate(neighbour_tree=str_remove_all(neighbour_tree,"V") %>% as.integer())
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
add_column(treeID=treeID,.before=1) %>%
setNames(c("treeID",treeID)) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_tree",values_to="trees_overlap")
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
add_column(treeID=treeID,.before=1) %>%
setNames(c("treeID",treeID)) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_tree",values_to="trees_overlap") %>%
tidyr::nest(overlaps_trees=c(neighbour_rowID,trees_overlap))
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
add_column(treeID=treeID,.before=1) %>%
setNames(c("treeID",treeID)) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_treeID",values_to="trees_overlap") %>%
tidyr::nest(overlaps_trees=c(neighbour_treeID,trees_overlap))
plot_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps(data.frame(X=0,Y=0,id="plot centre") %>%
sf::st_as_sf(coords=c("X","Y")) %>%
sf::st_buffer(dist=plot_radius)) %>%
as.matrix() %>%
as.data.frame() %>%
setNames("overlaps_plot") %>%
tibble::add_column(ids,.before=1)
ids=treeID
plot_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps(data.frame(X=0,Y=0,id="plot centre") %>%
sf::st_as_sf(coords=c("X","Y")) %>%
sf::st_buffer(dist=plot_radius)) %>%
as.matrix() %>%
as.data.frame() %>%
setNames("overlaps_plot") %>%
tibble::add_column(ids,.before=1)
plot_overlap
tree_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
setNames(treeID) %>%
add_column(treeID=ids,.before=1) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_treeID",values_to="trees_overlap") %>%
tidyr::nest(overlaps_trees=c(neighbour_treeID,trees_overlap))
tree_overlap
?join_by
dplyr::full_join(tree_overlap,plot_overlap,by="treeID")
tree_overlap
tree_overlap %>%
dplyr::full_join(plot_overlap,by="treeID")
tree_ovcerlap
tree_overlap
plot_overlap
plot_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps(data.frame(X=0,Y=0,id="plot centre") %>%
sf::st_as_sf(coords=c("X","Y")) %>%
sf::st_buffer(dist=plot_radius)) %>%
as.matrix() %>%
as.data.frame() %>%
setNames("overlaps_plot") %>%
tibble::add_column(treeID=ids,.before=1)
plot_overlap
tree_overlap %>%
dplyr::full_join(plot_overlap,by="treeID")
plot_overlap %>%
dplyr::full_join(tree_overlap,by="treeID")
tree_overlap %>%
dplyr::full_join(plot_overlap,by="treeID") %>%
dplyr::relocate(plot_overlap,.after="treeID")
tree_overlap %>%
dplyr::full_join(plot_overlap,by="treeID") %>%
dplyr::relocate(plot_overlap,.after=treeID)
tree_overlap %>%
dplyr::full_join(plot_overlap,by="treeID")
stopifnot(any(class(x)%in%"sf"),is.null(ids))
stopifnot(any(class(x)%in%"sf"),!is.null(ids))
list_tree_neighbour<-function(x,buffer_radius,plot_radius=12.6,ids=NULL,diam=NULL,wt=NULL) {
# stop function if x is not sf object or ids not provided
stopifnot(any(class(x)%in%"sf"),!is.null(ids))
# incorporate diameter data into buffer
if(is.null(diam)) {buffer_radius=buffer_radius} else {
if(length(diam)!=nrow(x)) {stop("Length of diameter data does not match nrow(x)")} else {
buffer_radius=buffer_radius+(diam/2/100) }} # remember that diameter has to be converted to metres!
# incorporate weights into buffer
if(is.null(wt)) {buffer_radius=buffer_radius} else {
if(length(wt)!=nrow(x)) {stop("Length of weights does not match nrow(x)")} else {
buffer_radius=buffer_radius*wt}}
# determine which tree buffers overlap
tree_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
setNames(treeID) %>%
add_column(treeID=ids,.before=1) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_treeID",values_to="trees_overlap") %>%
tidyr::nest(overlaps_trees=c(neighbour_treeID,trees_overlap))
# determine if tree buffers overlap with plot
plot_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps(data.frame(X=0,Y=0,id="plot centre") %>%
sf::st_as_sf(coords=c("X","Y")) %>%
sf::st_buffer(dist=plot_radius)) %>%
as.matrix() %>%
as.data.frame() %>%
setNames("overlaps_plot") %>%
tibble::add_column(treeID=ids,.before=1)
# Stop function
if(nrow(plot_overlap)!=nrow(x) | nrow(tree_overlap)!=nrow(x)) {
stop("Error: the output is a different size than nrow(x).  Something wrong.")
}
# return
tree_overlap %>%
dplyr::full_join(plot_overlap,by="treeID") %>%
return()
}
x<-
tibble::tribble(
~treeNum,~X,~Y,~dbh,~treeID,
1,2,3,32.5,"Tree A",
2,-1,0,15.6,"Tree B",
3,-2.7,-2.7,34.7,"Tree C"
) %>%
sf::st_as_sf(coords=c("X","Y"))
buffer_radius=1.5
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID)
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=NULL)
if(any(class(x)%in%"sf")) {} else {stop("You must provide x as an sf object")}
list_tree_neighbour<-function(x,buffer_radius,plot_radius=12.6,ids=NULL,diam=NULL,wt=NULL) {
# Error messages
if(any(class(x)%in%"sf")) {} else {stop("You must provide x as an sf object")}
# stop function if x is not sf object or ids not provided
stopifnot(any(class(x)%in%"sf"),!is.null(ids))
# incorporate diameter data into buffer
if(is.null(diam)) {buffer_radius=buffer_radius} else {
if(length(diam)!=nrow(x)) {stop("Length of diameter data does not match nrow(x)")} else {
buffer_radius=buffer_radius+(diam/2/100) }} # remember that diameter has to be converted to metres!
# incorporate weights into buffer
if(is.null(wt)) {buffer_radius=buffer_radius} else {
if(length(wt)!=nrow(x)) {stop("Length of weights does not match nrow(x)")} else {
buffer_radius=buffer_radius*wt}}
# determine which tree buffers overlap
tree_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
setNames(treeID) %>%
add_column(treeID=ids,.before=1) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_treeID",values_to="trees_overlap") %>%
tidyr::nest(overlaps_trees=c(neighbour_treeID,trees_overlap))
# determine if tree buffers overlap with plot
plot_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps(data.frame(X=0,Y=0,id="plot centre") %>%
sf::st_as_sf(coords=c("X","Y")) %>%
sf::st_buffer(dist=plot_radius)) %>%
as.matrix() %>%
as.data.frame() %>%
setNames("overlaps_plot") %>%
tibble::add_column(treeID=ids,.before=1)
# Stop function
if(nrow(plot_overlap)!=nrow(x) | nrow(tree_overlap)!=nrow(x)) {
stop("Error: the output is a different size than nrow(x).  Something wrong.")
}
# return
tree_overlap %>%
dplyr::full_join(plot_overlap,by="treeID") %>%
return()
}
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=NULL)
is.null(ids)
!is.null(ids)
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID)
x<-
tibble::tribble(
~treeNum,~X,~Y,~dbh,~treeID,
1,2,3,32.5,"Tree A",
2,-1,0,15.6,"Tree B",
3,-2.7,-2.7,34.7,"Tree C"
)
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID)
library(devtools)
document()
rm(list = c("list_tree_neighbour"))
document()
?list_tree_neighbour
load_all()
list_tree_neighbourf
list_tree_neighbour
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh)
x<-
tibble::tribble(
~treeNum,~X,~Y,~dbh,~treeID,
1,2,3,32.5,"Tree A",
2,-1,0,15.6,"Tree B",
3,-2.7,-2.7,34.7,"Tree C"
) %>%
sf::st_as_sf(coords=c("X","Y"))
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh)
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID)
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID) %>%
unnest(-c(treeID,overlaps_plot))
install()
help(list_tree_neighbour)
library(silvFunctions)
help(list_tree_neighbour)
check()
library(devtools)
check()
library(tidyverse)
x<-
tibble::tribble(
~treeNum,~X,~Y,~dbh,~treeID,
1,2,3,32.5,"Tree A",
2,-1,0,15.6,"Tree B",
3,-2.7,-2.7,34.7,"Tree C"
) %>%
sf::st_as_sf(coords=c("X","Y"))
x %>%
sf::st_drop_geometry() %>%
dplyr::bind_cols(
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID)) %>%
tidyr::unnest(-c(treeID,overlaps_plot))
x %>%
sf::st_drop_geometry() %>%
dplyr::bind_cols(
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID))
check()
plot_radius=12.6
buffer_radius=1.5
# Error messages
if(any(class(x)%in%"sf")) {} else {stop("You must provide x as an sf object")}
if(is.null(ids)) stop("You must provide tree ids")
ids=x$treeID
if(is.null(ids)) stop("You must provide tree ids")
# incorporate diameter data into buffer
if(is.null(diam)) {buffer_radius=buffer_radius} else {
if(length(diam)!=nrow(x)) {stop("Length of diameter data does not match nrow(x)")} else {
buffer_radius=buffer_radius+(diam/2/100) }} # remember that diameter has to be converted to metres!
# incorporate weights into buffer
if(is.null(wt)) {buffer_radius=buffer_radius} else {
if(length(wt)!=nrow(x)) {stop("Length of weights does not match nrow(x)")} else {
buffer_radius=buffer_radius*wt}}
# determine which tree buffers overlap
tree_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps() %>%
as.matrix() %>%
as.data.frame() %>%
setNames(ids) %>%
add_column(treeID=ids,.before=1) %>%
tidyr::pivot_longer(-treeID,names_to="neighbour_treeID",values_to="trees_overlap") %>%
tidyr::nest(overlaps_trees=c(neighbour_treeID,trees_overlap))
tree_overlap
# determine if tree buffers overlap with plot
plot_overlap<-
x %>%
sf::st_buffer(dist=buffer_radius) %>%
sf::st_overlaps(data.frame(X=0,Y=0,id="plot centre") %>%
sf::st_as_sf(coords=c("X","Y")) %>%
sf::st_buffer(dist=plot_radius)) %>%
as.matrix() %>%
as.data.frame() %>%
setNames("overlaps_plot") %>%
tibble::add_column(treeID=ids,.before=1)
plot_overlap
# Stop function
if(nrow(plot_overlap)!=nrow(x) | nrow(tree_overlap)!=nrow(x)) {
stop("Error: the output is a different size than nrow(x).  Something wrong.")
}
# return
tree_overlap %>%
dplyr::full_join(plot_overlap,by="treeID") %>%
return()
x %>%
sf::st_drop_geometry() %>%
dplyr::bind_cols(
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID)) %>%
tidyr::unnest(-c(treeID,overlaps_plot))
x %>%
sf::st_drop_geometry()
x %>%
sf::st_drop_geometry() %>%
dplyr::bind_cols(
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID))
x %>%
sf::st_drop_geometry() %>%
dplyr::left_join(
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID),by="treeID")
x<-
tibble::tribble(
~treeID,~X,~Y,~dbh,
"Tree A",2,3,32.5,
"Tree B",-1,0,15.6,
"Tree C",-2.7,-2.7,34.7
) %>%
sf::st_as_sf(coords=c("X","Y"))
x %>%
sf::st_drop_geometry() %>%
dplyr::left_join(
list_tree_neighbour(x,buffer_radius=1.5,plot_radius=3.99,diam=x$dbh,ids=x$treeID),by="treeID") %>%
tidyr::unnest(-c(treeID,overlaps_plot))
?left_join
check()
tibble::tribble(
~treeID,~X,~Y,~dbh,
"Tree A",2,3,32.5,
"Tree B",-1,0,15.6,
"Tree C",-2.7,-2.7,34.7
)
check()
install()
?list_tree_neighbour
document()
?list_tree_neighbour
document()
?list_tree_neighbour
install()
library(silvFunctions)
?list_tree_neighbour
help(list_tree_neighbiour)
help(list_tree_neighbour)
library(silvFunctions)
library(silvFunctions)
help(list_tree_neighbour)
library(devtools)
document()
install()
document()
?treeCoords
document()
?treeCoords
document()
document()
?treeCoords
document()
document()
?treeCoords
document()
?treeCoords
install()
library(devtools)
document()
document()
install()
